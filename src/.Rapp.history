which(tmp[,5]%in%covNames,arr.ind=T)
Grab the EGFR, CDKN2A/B PTEN, CDK4, PDGFRA#
covNames = c("EGFR","CDKN2A", "PTEN","CDK4","PDGFRA")#
tmp = rs(mat1)#
idex = which(tmp[,5]%in%covNames,arr.ind=T)#
rs(mat1)[index,1:5]
Grab the EGFR, CDKN2A/B PTEN, CDK4, PDGFRA#
covNames = c("EGFR","CDKN2A", "PTEN","CDK4","PDGFRA")#
tmp = rs(mat1)#
index = which(tmp[,5]%in%covNames,arr.ind=T)#
rs(mat1)[index,1:5]
rs(mat2)[index,1:5]
dataX=tcgaData$dna[index,]
dataX
barplot(dataX[1,])
barplot(as.numeric(dataX[1,]))
barplot(as.numeric(dataX[2,]))
barplot(as.numeric(dataX[3,]))
barplot(as.numeric(dataX[4,]))
barplot(as.numeric(dataX[5,]))
log2(4/2)
log2(1/2)
log2(3/2)
dataX=dataX>log2(3/2) | dataX<log2(1/2)
barplot(dataX[1,])
barplot(dataX[2,])
barplot(dataX[3,])
rowSums(dataX)
tmp[index,1:5]
0 | 1
dataX[1:10,1:5]
dataX[,1:5]
dataY = tcgaData$rna
rowSds
?rowSds
source("http://bioconductor.org/biocLite.R")#
    biocLite("genefilter")
dataY = rowSds(tcgaData$rna) > qunatile(rowSds(tcgaData$rna),0.2)
index2 = rowSds(tcgaData$rna) > qunatile(rowSds(tcgaData$rna),0.2)
index2 = rowSds(tcgaData$rna) > quantile(rowSds(tcgaData$rna),0.2)
quantile(rowSds(tcgaData$rna),0.2)
rowSds(tcgaData$rna)
index2 = rowSds(tcgaData$rna) > quantile(rowSds(tcgaData$rna),0.2,na.rm=T)
index2
sum(index2)
sum(index2,na.rm=T)
index2 = rowSds(tcgaData$rna) > quantile(rowSds(tcgaData$rna),0.8,na.rm=T)
sum(index2,na.rm=T)
index2 = rowSds(tcgaData$rna) > quantile(rowSds(tcgaData$rna),0.9,na.rm=T)
index2
sum(index2)
sum(index2,na.rm=T)
which(index2)
tcgaData$rna['A2BP1',]
barplot(as.numeric(tcgaData$rna['A2BP1',]))
barplot(as.numeric(tcgaData$rna['TP53',]))
barplot(as.numeric(tcgaData$rna['cMYC',]))
barplot(as.numeric(tcgaData$rna['CMYC',]))
barplot(as.numeric(tcgaData$rna['MYCN',]))
dataY = tcgaData$rna[index2,]
dim(dataY)
index2 = rowSds(tcgaData$rna) > quantile(rowSds(tcgaData$rna),0.95,na.rm=T)
dataY = tcgaData$rna[index2,]
dim(dataY)
save(dataX,dataY,file="XY-GBM-TCGA.rdata")
rownames(dataY)
dataY = dataY[!is.na(rownames(dataY)),]
rownames(dataY)
Grab the EGFR, CDKN2A/B PTEN, CDK4, PDGFRA#
covNames = c("EGFR","CDKN2A", "PTEN","CDK4","PDGFRA")#
tmp = rs(mat1)#
index = which(tmp[,5]%in%covNames,arr.ind=T)#
#
dataX=tcgaData$dna[index,]#
dataX=dataX>log2(3/2) | dataX<log2(1/2)#
#
### filtering Y by variance#
index2 = rowSds(tcgaData$rna) > quantile(rowSds(tcgaData$rna),0.95,na.rm=T)#
dataY = tcgaData$rna[index2,]#
dataY = dataY[!is.na(rownames(dataY)),]#
save(dataX,dataY,file="XY-GBM-TCGA.rdata")
dataX
dataY
boxplot(datY)
boxplot(dataY)
boxplot(dataY)
save(dataX,dataY,file="../dat/XY-GBM-TCGA.rdata")
load('../dat/XY-GBM-TCGA.rdata')
rm(list=ls())#
load('../dat/XY-GBM-TCGA.rdata')
rm(list=ls())#
load('../dat/XY-GBM-TCGA.rdata')#
source('CRFfunctions.R')
GBMNetwork=GGM.linearCRF.path.network.stars(dataY,dataX,20,0.05)
traceback()
GBMNetwork=GGM.linearCRF.path.network.stars(dataY,dataX,20,0.05,niter=100)
dim(dataY)
dim(dataX)
GBMNetwork=GGM.linearCRF.path.network.stars(t(dataY),t(dataX),20,0.05,niter=100)
dim(dataY)
dim(dataX)
library(multicore)
mcapply
mc.apply
B = array(0,dim=10)
B
foo = function(i){B[i]=1}
foo = function(i){B[i]=i}
mclapply(1:10,foo)
B
source("/Volumes/Users/Shared/Paper4-CRF/CRF/src/CRFfunctions.R")
getOption("cores")
getOption
?getOption
load('../dat/GBM-CRF.rdata')
ls()
ls()
GBMNetwork$var
GBMNetwork$opt.index
GBMNetwork$var<0.05
GBMNetwork$var<0.01
GBMNetwork$path$Ahat[[1]]
GBMNetwork$path$Ahat[[2]]
str(GBMNetwork$path$Ahat)
image(matrix(GBMNetwork$path$Ahat[,1,5],nrow=876)
)
image(Matrix(GBMNetwork$path$Ahat[,1,5],nrow=876))
image(Matrix(GBMNetwork$path$Ahat[,1,10],nrow=876))
image(Matrix(GBMNetwork$path$Ahat[,1,20],nrow=876))
image(Matrix(GBMNetwork$path$Ahat[,1,10],nrow=876))
image(Matrix(GBMNetwork$path$Ahat[,1,10],nrow=876))
image(Matrix(GBMNetwork$path$Ahat[,1,20],nrow=876))
10*sqrt(465)/465
GBMNetwork$var<0.001
est$merge=GBMNetwork$merge
est=c()
est$merge=GBMNetwork$merge
for(j in 1:nlams){#
		tmp = est$merge[[j]]#
		index = 1:p+(0:(p-1))*p#
		tmp= tmp[-index,]#
		est$var[j] = 4*sum(tmp*(1-tmp))/(p*(p-1)*q)	#
	}
nlams=20
j=1
tmp = est$merge[[j]]
index = 1:p+(0:(p-1))*p
tmp= tmp[-index,]
p = 876
index = 1:p+(0:(p-1))*p
tmp= tmp[-index,]
4*sum(tmp*(1-tmp))/(p*(p-1)*q)
q=5
4*sum(tmp*(1-tmp))/(p*(p-1)*q)
j=2
j= 10
tmp = est$merge[[j]]#
		index = 1:p+(0:(p-1))*p#
		tmp= tmp[-index,]
4*sum(tmp*(1-tmp))/(p*(p-1)*q)
mean(tmp*(1-tmp))
mean(2*tmp*(1-tmp))
dim(tmp)
str(tmp)
4*sum(tmp*(1-tmp))/((p-2)*(p-1)*q)
2*sum(tmp*(1-tmp))/(p*(p-1)*q)
mean(tmp*(1-tmp))
mean(2*tmp*(1-tmp))
for(j in 1:nlams){#
		tmp = est$merge[[j]]#
		index = 1:p+(0:(p-1))*p#
		tmp= tmp[-index,]#
		est$var[j] = mean(2*tmp*(1-tmp))	#
	}
est$var
est$var<0.001
which(est$var<0.001,arr.ind=T)
library(igraph)
library(igraph)
graph.adjacency
graphObj=graph.adjacency( matrix(   GBMNetwork$path$Ahat[,1,12],nrow=ncol(dataY)))
matrix(   GBMNetwork$path$Ahat[,1,12],nrow=ncol(dataY))
a=matrix(   GBMNetwork$path$Ahat[,1,12],nrow=ncol(dataY))
ncol(dataY)
graphObj=graph.adjacency( matrix(   GBMNetwork$path$Ahat[,1,12],nrow=nrow(dataY)))
plot(graphObj)
b=
matrix(   GBMNetwork$path$Ahat[,1,12],nrow=nrow(dataY))
bb=cor(b)
image(bb)
image(b)
matrix(   GBMNetwork$path$Ahat[,5,12],nrow=nrow(dataY))
image(matrix(   GBMNetwork$path$Ahat[,5,12],nrow=nrow(dataY)))
image(matrix(   GBMNetwork$path$Ahat[,4,12],nrow=nrow(dataY)))
image(matrix(   GBMNetwork$path$Ahat[,3,12],nrow=nrow(dataY)))
image(matrix(   GBMNetwork$path$Ahat[,2,12],nrow=nrow(dataY)))
image(matrix(   GBMNetwork$path$Ahat[,1,12],nrow=nrow(dataY)))
write.graph(graphObj,file="../dat/GBM_1.gml",format="gml")
for(i in 1:5){#
graphObj=graph.adjacency( matrix(   GBMNetwork$path$Ahat[,i,12],nrow=nrow(dataY)))#
plot(graphObj)#
write.graph(graphObj,file=paste("../dat/GBM_",i,".gml"),format="gml")#
}
for(i in 1:5){#
graphObj=graph.adjacency( matrix(   GBMNetwork$path$Ahat[,i,12],nrow=nrow(dataY)))#
write.graph(graphObj,file=paste("../dat/GBM_",i,".gml"),format="gml")#
}
tmp =matrix(   GBMNetwork$path$Ahat[,i,12],nrow=nrow(dataY))
rownames(tmp)=rownames(dataY)
rownames(tmp)[1:5]
for(i in 1:5){#
	tmp =matrix(   GBMNetwork$path$Ahat[,i,12],nrow=nrow(dataY))#
	rownames(tmp)=rownames(dataY)#
	colnames(tmp)=rownames(dataY)#
graphObj=graph.adjacency( matrix(   GBMNetwork$path$Ahat[,i,12],nrow=nrow(dataY)),mode="undirected")#
write.graph(graphObj,file=paste("../dat/GBM_",i,".gml",sep=""),format="gml")#
}
for(i in 1:5){#
#	tmp =matrix(   GBMNetwork$path$Ahat[,i,12],nrow=nrow(dataY))#
#	rownames(tmp)=rownames(dataY)#
#	colnames(tmp)=rownames(dataY)#
graphObj=graph.adjacency( matrix(   GBMNetwork$path$Ahat[,i,12],nrow=nrow(dataY)),mode="undirected")#
V(graphObj)$name= rownames(dataY)#
write.graph(graphObj,file=paste("../dat/GBM_",i,".gml",sep=""),format="gml")#
}
tmp = rs(mat1)
colnames(dataX)
rownames(dataX)
load("../dat/tcga-ggm-dat.rdata")
covNames = c("EGFR","CDKN2A", "PTEN","CDK4","PDGFRA")#
tmp = rs(mat1)#
index = which(tmp[,5]%in%covNames,arr.ind=T)
index
tmp[index,1:5]
pathwayGenes = scan('../dat/c2.cp.v3.1.symbols.gmt.txt',what="character")
pathwayGenes
unique(pathwayGenes)
pathwayGenes = unique(scan('../dat/c2.cp.v3.1.symbols.gmt.txt',what="character"))
length(pathwayGenes)
rownames(dataY)
intersect(rownames(dataY),pathwayGenes)
index2 = rowSds(tcgaData$rna) > quantile(rowSds(tcgaData$rna),0.90,na.rm=T)#
dataY = tcgaData$rna[index2,]#
dataY = dataY[!is.na(rownames(dataY)),]#
#
pathwayGenes = unique(scan('../dat/c2.cp.v3.1.symbols.gmt.txt',what="character"))#
dataY = dataY[rownames(dataY)%in% pathwayGenes,]
load("../dat/tcga-ggm-dat.rdata")#
sampleID=c()#
sampleID$rna=c(colnames(rna.mat2),colnames(rna.mat3))#
sampleID$rna=substring(sampleID$rna,1,15)#
#
tcgaData=c()#
tcgaData$rna = cbind(rna.mat2,rna.mat3)#
colnames(tcgaData$rna)=sampleID$rna#
tcgaData$rna = tcgaData$rna[,!duplicated(sampleID$rna)]#
sampleID$dna=c(colnames(rs(mat1)),colnames(rs(mat2)))#
sampleID$dna=substring(sampleID$dna,1,15)#
tcgaData$dna = cbind(rs(mat1),rs(mat2))#
colnames(tcgaData$dna)=sampleID$dna#
tcgaData$dna = tcgaData$dna[,!duplicated(sampleID$dna)]#
#
commonID = intersect(colnames(tcgaData$dna),colnames(tcgaData$rna))#
tcgaData$dna = tcgaData$dna[,commonID]#
tcgaData$rna = tcgaData$rna[,commonID]#
#
###### Grab the EGFR, CDKN2A/B PTEN, CDK4, PDGFRA#
covNames = c("EGFR","CDKN2A", "PTEN","CDK4","PDGFRA")#
tmp = rs(mat1)#
index = which(tmp[,5]%in%covNames,arr.ind=T)#
#
dataX=tcgaData$dna[index,]#
dataX=dataX>log2(3/2) | dataX<log2(1/2)#
#
### filtering Y by variance#
index2 = rowSds(tcgaData$rna) > quantile(rowSds(tcgaData$rna),0.90,na.rm=T)#
dataY = tcgaData$rna[index2,]#
dataY = dataY[!is.na(rownames(dataY)),]#
#
pathwayGenes = unique(scan('../dat/c2.cp.v3.1.symbols.gmt.txt',what="character"))#
dataY = dataY[rownames(dataY)%in% pathwayGenes,]
load('../dat/XY-GBM-TCGA.rdata')
for(i in 1:5){#
#	tmp =matrix(   GBMNetwork$path$Ahat[,i,12],nrow=nrow(dataY))#
#	rownames(tmp)=rownames(dataY)#
#	colnames(tmp)=rownames(dataY)#
# graphObj=graph.adjacency( matrix(   GBMNetwork$path$Ahat[,i,12],nrow=nrow(dataY)),mode="undirected")#
# V(graphObj)$name= rownames(dataY)#
# write.graph(graphObj,file=paste("../dat/GBM_",i,".gml",sep=""),format="gml")#
#
image(matrix(   GBMNetwork$path$Ahat[,i,12],nrow=nrow(dataY))#
}
for(i in 1:5){#
#	tmp =matrix(   GBMNetwork$path$Ahat[,i,12],nrow=nrow(dataY))#
#	rownames(tmp)=rownames(dataY)#
#	colnames(tmp)=rownames(dataY)#
# graphObj=graph.adjacency( matrix(   GBMNetwork$path$Ahat[,i,12],nrow=nrow(dataY)),mode="undirected")#
# V(graphObj)$name= rownames(dataY)#
# write.graph(graphObj,file=paste("../dat/GBM_",i,".gml",sep=""),format="gml")#
#
image(matrix(   GBMNetwork$path$Ahat[,i,12],nrow=nrow(dataY)))#
}
rm(list=ls())#
load('../dat/tcga-ggm-dat.rdata')#
library(igraph)
rm(list=ls())#
load('../dat/tcga-ggm-dat.rdata')#
library(igraph)
ls()
ls()
rm(list=ls())#
load('../dat/GBM-CRF.rdata')#
library(igraph)
GBMNetwork$var
GBMNetwork$var<0.001
GBMNetwork$var<0.001#
vd=c()#
for(i in 1:5){#
	tmp =matrix(GBMNetwork$path$Ahat[,i,12],nrow=nrow(dataY))#
	vd=rbind(vd,rowSums(tmp))#
}
vd
image(vd)
max(vd)
which(vd=10)
which(vd==10)
image(vd)
rowSums(vd)
colSums(vd)
max(colSums(vd))
which.max(colSums(vd))
vd[,70]
vd=rbind(vd,rowSums(tmp))#
	graphObj=graph.adjacency( matrix(   GBMNetwork$path$Ahat[,i,12],nrow=nrow(dataY)),mode="undirected")#
	V(graphObj)$name= rownames(dataY)
subgraphObj= subgraph(graphObj,which(tmp[70,]==1,arr.ind=T))
?
igraph_induced_subgraph
?igraph_induced_subgraph
?induced_subgraph
subgraphObj= induced.graph(graphObj,which(tmp[70,]==1,arr.ind=T))
subgraphObj= subgraph(graphObj,which(tmp[70,]==1,arr.ind=T))
plot(subgrphObj)
subgraphObj
?subgraph
subgraphObj= induced.subgraph(graphObj,which(tmp[70,]==1,arr.ind=T))
plot(subgrphObj)
g <- graph.ring(10)
plot(g)
g
plot(subgraphObj)
get.adjacency(subgraphObj)
which(tmp[70,]==1,arr.ind=T)
tmp[,70]
i
i=1
subgraphObj= induced.subgraph(graphObj,which(tmp[70,]==1,arr.ind=T))
plot(subgraphObj)
get.adjacency(subgraphObj)
tmp =matrix(GBMNetwork$path$Ahat[,i,12],nrow=nrow(dataY))#
	vd=rbind(vd,rowSums(tmp))#
	graphObj=graph.adjacency( matrix(   GBMNetwork$path$Ahat[,i,12],nrow=nrow(dataY)),mode="undirected")#
	V(graphObj)$name= rownames(dataY)#
	subgraphObj= induced.subgraph(graphObj,which(tmp[70,]==1,arr.ind=T))
which(tmp[70,]==1,arr.ind=T)
plot(subgraphObj)
subgraphObj= induced.subgraph(graphObj,c(70,which(tmp[70,]==1,arr.ind=T))#
		plot(subgraphObj)
which(tmp[70,]==1,arr.ind=T)
subgraphObj= induced.subgraph(graphObj,c(70,which(tmp[70,]==1,arr.ind=T))
)
subgraphObj= induced.subgraph(graphObj,c(70,which(tmp[70,]==1,arr.ind=T)))#
		plot(subgraphObj)
vd=c()#
for(i in 1:5){#
	tmp =matrix(GBMNetwork$path$Ahat[,i,12],nrow=nrow(dataY))#
	vd=rbind(vd,rowSums(tmp))#
}
vd
colSums(vd)
unique(colSums(vd))
colSums(vd) ==16
which(colSums(vd) ==16)
par(mfrow=c(1,5))#
for(i in 1:5){#
	tmp =matrix(GBMNetwork$path$Ahat[,i,12],nrow=nrow(dataY))#
	graphObj=graph.adjacency( matrix(   GBMNetwork$path$Ahat[,i,12],nrow=nrow(dataY)),mode="undirected")#
	V(graphObj)$name= rownames(dataY)#
	subgraphObj= induced.subgraph(graphObj,c(355,which(tmp[355,]==1,arr.ind=T)))#
		plot(subgraphObj)#
}
which(colSums(vd)==15)
which(colSums(vd)==17)
which(colSums(vd)==15)
